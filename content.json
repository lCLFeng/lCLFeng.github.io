{"meta":{"title":"lCLFeng","subtitle":"程序设计 | 艺术设计","description":"lCLFeng's blog","author":"lCLFeng","url":"http://lclfeng.github.io","root":"/"},"pages":[{"title":"","date":"2022-03-26T14:01:33.777Z","updated":"2016-07-31T04:21:44.824Z","comments":true,"path":"baidu_verify_dL9Q4ZwJTM.html","permalink":"http://lclfeng.github.io/baidu_verify_dL9Q4ZwJTM.html","excerpt":"","text":"dL9Q4ZwJTM"},{"title":"","date":"2022-03-26T13:54:42.374Z","updated":"2016-07-31T02:58:01.252Z","comments":true,"path":"google09a006cbc43f0f4b.html","permalink":"http://lclfeng.github.io/google09a006cbc43f0f4b.html","excerpt":"","text":"google-site-verification: google09a006cbc43f0f4b.html"},{"title":"一些事情","date":"2016-07-28T02:16:52.000Z","updated":"2022-03-27T09:32:22.821Z","comments":false,"path":"about/index.html","permalink":"http://lclfeng.github.io/about/index.html","excerpt":"","text":"关于我 程序设计 | 艺术设计 关于博客 写一些事，一些体验，一些想法"},{"title":"tags","date":"2016-07-27T14:16:08.000Z","updated":"2022-03-27T04:12:22.080Z","comments":true,"path":"tags/index.html","permalink":"http://lclfeng.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"test","slug":"_test","date":"2022-03-27T10:41:09.000Z","updated":"2022-03-27T10:41:44.794Z","comments":true,"path":"2022/03/27/_test/","link":"","permalink":"http://lclfeng.github.io/2022/03/27/_test/","excerpt":"","text":"test","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://lclfeng.github.io/tags/Java/"}]},{"title":"Java 单例的线程安全、反射安全和反序列化安全概念","slug":"_Java 单例的线程安全、反射安全和反序列化安全概念","date":"2022-03-27T06:40:32.000Z","updated":"2022-03-27T06:53:37.603Z","comments":true,"path":"2022/03/27/_Java 单例的线程安全、反射安全和反序列化安全概念/","link":"","permalink":"http://lclfeng.github.io/2022/03/27/_Java%20%E5%8D%95%E4%BE%8B%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E3%80%81%E5%8F%8D%E5%B0%84%E5%AE%89%E5%85%A8%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%89%E5%85%A8%E6%A6%82%E5%BF%B5/","excerpt":"","text":"Java 单例的线程安全、反射安全和序列化安全概念： 线程安全：指的是多个线程下，只有一个线程能够创建单例对象，且所有线程只能获取到同一个完整的单例对象 反射安全：指的是无法利用反射机制去突破私有构造器，从而避免产生多个对象 反序列化安全：指的是无法通过反序列化生成一个新的对象","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://lclfeng.github.io/tags/Java/"},{"name":"技术","slug":"技术","permalink":"http://lclfeng.github.io/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"极限局部保号性的理解","slug":"第三篇","date":"2016-07-24T05:51:13.000Z","updated":"2016-08-03T14:22:08.814Z","comments":true,"path":"2016/07/24/第三篇/","link":"","permalink":"http://lclfeng.github.io/2016/07/24/%E7%AC%AC%E4%B8%89%E7%AF%87/","excerpt":"","text":"一般高等数学中极限分函数极限和数列极限，因此，极限的性质之一——局部保号性也分函数极限局部保号性和收敛数列保号性。 最近学习高数，被各种概念、定理、性质搞得头都炸了。昨晚得空在网上搜寻了一波资料，现在在这里记录一下对保号性的学习和理解。 0. 局部保号性的数学表达形式&amp;#160; &amp;#160; &amp;#160; &amp;#160;函数极限的局部保号性：如果而且＞或＜，那么存在常数＞，使当＜＜时，有或 &amp;#160; &amp;#160; &amp;#160; &amp;#160;收敛数列的保号性：如果有数列收敛于，且或，那么存在正整数，当时，有或者 注：上面都没写出无穷的情况。 ### 1. 如何理解\"局部\" 只要有一个邻域使得结论成立，则比此邻域半径小的邻域内结论仍然是成立的。所以可以找到无穷个邻域支持结论 &amp;#160; &amp;#160; &amp;#160; &amp;#160;这就是局部的意义，否则，那就不是讨论局部，而是讨论整个定义域内了，这时结论已经很难满足了。 2. 如理解”保号性”★&amp;#160; &amp;#160; &amp;#160; &amp;#160;保号性是指定义域在一定范围内时（可以认为是在极其微小的的一段区间里）,其函数值要么都为正,要么都为负,即如果已知,则存在包含的微小的区间,其均大于0.&amp;#160; &amp;#160; &amp;#160; &amp;#160;而数列极限的保号性其实是函数极限保号性的一种特例.即自变量不再是,而是,即自然数.但是也有一种特例,比如.它的极限是,但的是一正一负交替出现,，所以没有保号性.&amp;#160; &amp;#160; &amp;#160; &amp;#160;终上所述,如果极限非0,则保号性存在,你可以理解为一个函数（数列）极限的正负号确定,那么它周围非常小的区间内都和它是同号的；如果极限的0,且函数（数列）是一正一负交替的,则无保号性. *引用一段百度知道的资料* &gt;“保号性”的说法，是汉语微积分教学中，穿凿附会、虚张声势的说法。 它刻意回避问题的本质，不是单刀直入、直面主题，而是有意玩弄无聊 的文字游戏。 【一、对于“保号性”的剖析】 1、点是没有大小尺度的，两个点无论靠得多近，在两点连线的中间都可以插入无穷多个点。 2、对于连续函数，由于连续性，在函数值为零的点跟函数值不为零的点之间就可以插入无穷多个函数值不为零的点，它们具有相同的正负号。 3、我们的教学，历来喜欢死记硬背，喜欢夸大其词，喜欢穿凿附会。所以，我们就刻意回避〖函数连续〗的本质，与〖点的可插入〗的特性,给出一个莫名其妙的名称“保号性”。 既然可插入，在一个函数值为正的点附近，就自然而然地可插入无数个函数值为正的点；同样地，在一个函数值为负的点附近，就自然而然地可插入无数个函数值为正的点； 我们神乎其神、神秘兮兮地夸张为保号！为什么保？怎样保？谁来保？保什么？实质究竟是什么？ 就这样，主题、实质被忽悠了，玩弄术语的结果，是直觉、本能就丧失了。 【二、回答楼主的问题】到这里，楼主应该已经完全明白了。只要 ε 足够的小，不管是函数值，还是数列的值，从此之后就具有了同样正负号。 ε 只能小，不能大！只有小，才能具有极限的根本意义，极限的根本意思是【趋近 = tendency】。这个趋近，不是一般的趋近，不是大致的趋近，而是无止境的趋势！而是极限值跟函数值之差无止境地趋于零的趋近！说无止境的逼近、迫近。 汉语的微积分教学，历来对趋势大大咧咧、极其粗燥！汉语的趋势的含义，不及英文的 tendency 给人直觉深刻。这是语言特色所决定的，同样汉语含义淋漓尽致的词汇，英文也经常会无法确切领会。 *知乎上的一段资料* &gt; 我在讲数列极限的保号性的时候，我不由自主的给学生比喻该内容为，积德成仙，积恶成鬼。若泛泛的讲，保号性说：数列中除去有限个项后的无限项中的每个项都为正的，那么极限也为正的，否则除去有限个项后的无限项中的每个项为负的，那么极限也为负的。我感觉虽然这是一种量则质变的过程但是某中内在本质延续下来了。仙与鬼都不是人，但是它们都是人的某种内在的能量的积累后所导致的结果。仙是积德的人所变成的，这些人与仙之间有着共同的性质，那就是都有着某种正义与善的本性。在这些人变成仙的质的变化的时候，其中这种潜在的能量延续下来了，他们都具有某种共同的本性。积德成仙，当积为一定程度时，这是一种必然的结果，而不是偶然的。人为什么不能成仙呢？ 我感觉我们对这种必然性总是持着某种怀疑的态度，不够坚定，而不行德。当有一些小小的似有道理的非论之时就忘却了这种必然的结果的存在而行他路，这样虽然在人生当中有些零散的积德，但不够达到那种成仙的量，仙还是仙，人还是人。人也对积恶成鬼持怀疑态度而往往不免行恶，玷污自我。 那么人到底相信什么？什么理论能经得起一切可能的考验？我不知道，因为连能量守恒定律也有可能在黑洞的解释中失效，所以我还是在信其同时心底总是留有怀疑的余地。不过没有了纯洁的，实在的，彻底的信任，生命总是感觉缺了某种最重要的能量， 因此我宁愿没有余地的信任，积德成仙，积恶成鬼。虽不为成仙，却也可免成鬼；虽不为成仙，却也为生命赋予某种正义的力量；虽不为成仙，却也为生命留下一段温欣的回忆。 答主的[回答](https://www.zhihu.com/question/26875502/answer/37535485)也是转的。 ### 3. 关于证明的疑惑 对于教材上的证明，你可能会和我一样产生这样的疑惑： &gt;会不会有这样的情况呢——在处取到了极限（比方说是3吧）,这样的话,从左侧趋近于0.001时,怎么保证呢?毕竟0.001离0已经近的可以了吧? 答： &gt;既然函数在处极限存在,那么函数在某个邻域内有定义,这个邻域的区间长度是任意的,可以无限大可以无限小.就存在某个邻域,函数在这个邻域连续. 从左侧趋近于0.001时,可以找到上述的一左邻域,使得.这与自变量离0的远近无关.比如在内,. 这个证明是严密的,它的重点是**要说明存在常数δ**,就是找到一个δ就叫做存在(只要找到存在就可以了，不要去找不存在的).证明的过程就是在说明他找到了那一个δ,怎么说明的呢?因为函数有极限,所以根据定义,,这里的ε是指小正数,关键在于一个**小**字, **如果你取了2A**,那么它也许就不够小了,证明给的是取A的一半(其他数也可以，比如，等等),然后根据ε与δ之间的关系,必然存在一个δ可使结论成立,当然这里ε的取值可以有很多,但是没有必要把所有的成立的ε取值都列出来,因为*关键只要找到一个,就叫做存在*了. 至于时,这个定理就没有意义了,为什么叫保号定理?保号保号,保的就是附近很小一个空心领域内所有点的符号,保证这些点的符号都跟的符号一致,才叫保号嘛,等于0就没有符号而言了. ### 4. 且行且珍惜 或许你会说：在提升自我的路上总会有几个人挡在你的面前。 但，如果你连几个古人都跨不过去，如何谈得上提升自我。 **马勒戈壁**","categories":[],"tags":[{"name":"水笔","slug":"水笔","permalink":"http://lclfeng.github.io/tags/%E6%B0%B4%E7%AC%94/"},{"name":"学习","slug":"学习","permalink":"http://lclfeng.github.io/tags/%E5%AD%A6%E4%B9%A0/"}]}],"categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://lclfeng.github.io/tags/Java/"},{"name":"技术","slug":"技术","permalink":"http://lclfeng.github.io/tags/%E6%8A%80%E6%9C%AF/"},{"name":"水笔","slug":"水笔","permalink":"http://lclfeng.github.io/tags/%E6%B0%B4%E7%AC%94/"},{"name":"学习","slug":"学习","permalink":"http://lclfeng.github.io/tags/%E5%AD%A6%E4%B9%A0/"}]}